buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
  }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.3.5'
    id "org.jetbrains.grammarkit" version "2018.1.7"
    id 'checkstyle'

}
group 'net.sjrx.intellij.plugins'
version '0.1.2'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
  compile 'commons-io:commons-io:2.6'
  compile 'com.google.guava:guava:26.0-jre'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

intellij {
    version '2018.3'
}
patchPluginXml {
    changeNotes """
  <h3>v0.2.0</h3>
  <ul>
    <li>Updating syntax highlighting to properly handle comments with line continuations.</li>
    <li>Warning when line continuation character is followed by whitespace</li>
    <li>New inspection for deprecated options</li>
  <h3>v0.1.2</h3>
  <ul>
      <li>Added support for systemd v240 keywords.</li>
      <li>Fixed bug with tab character causing issues with syntax highlighting <a href="https://github.com/SJrX/systemdUnitFilePlugin/issues/51">#51</a>.</li>
  </ul>
  <h3>v0.1.1</h3>
  <ul>
      <li>Added support for IntelliJ 2018.3.</li>
  </ul>      
  <h3>v0.1.0</h3>
  <ul>
      <li>Initial Release.</li>
  </ul>
"""
}

// Add generated sources root
sourceSets.main.java.srcDirs += 'src/main/gen'

apply plugin: "idea"

idea {
  module {
    generatedSourceDirs += file('src/main/gen')

    downloadJavadoc = true
    downloadSources = true
  }
}

/*
 * CI Tasks
 */
checkstyle {
  // Exclude the generated sources
  checkstyleMain.source = "src/main/java"
  toolVersion "8.11"

}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}


/*
 * Build Tasks
 */

import com.palominolabs.gradle.task.git.clone.GitCloneTask

task cloneSystemdRepo(type: GitCloneTask) {
  description "clone the systemd repository"

  dir = file("git-dependencies/systemd")
  uri = 'https://github.com/systemd/systemd.git'
  treeish = 'v240' // a commit hash, or tag name, or branch name (with remote prefix, like 'origin/master')
}

task generateDataFromManPages(type: GenerateDataFromManPages) {
  description "Regenerate semantic data (used for documentation and inspections) by parsing the documentation from systemd git repository"
  group  "generation"

  systemdSourceCodeRoot = file("git-dependencies/systemd")
  generatedJsonFileLocation = file(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/net/sjrx/intellij/plugins/systemdunitfiles/semanticdata")

}


/*
 * Lexing / Parsing and Grammar Tasks
 */

apply plugin: 'org.jetbrains.grammarkit'
// import is optional to make task creation easier
import org.jetbrains.grammarkit.tasks.*

task generateLexer(type: GenerateLexer) {
  description "Generate the lexer necessary for parsing unit files using JFlex"
  group  "generation"

  source = "src/main/resources/net/sjrx/intellij/plugins/systemdunitfiles/lexer/SystemdUnitFile.flex"
  targetDir = "src/main/gen/net/sjrx/intellij/plugins/systemdunitfiles/generated/"
  targetClass = "UnitFileLexer"
  purgeOldFiles = true
}

task generateParser(type: GenerateParser) {
  description "Generate the grammar necessary for parsing unit files using GrammarKit"
  group  "generation"
  source = "src/main/resources/net/sjrx/intellij/plugins/systemdunitfiles/grammar/SystemdUnitFile.bnf"
  targetRoot = "src/main/gen/"

  // path to a parser file, relative to the targetRoot
  pathToParser = 'src/main/gen/net/sjrx/intellij/plugins/systemdunitfiles/generated/UnitFileParser.java'

  // path to a directory with generated psi files, relative to the targetRoot
  pathToPsiRoot = 'src/main/gen/net/sjrx/intellij/plugins/systemdunitfiles/psi/'

  purgeOldFiles = true

  dependsOn generateLexer
}

task generateOptionValidator(type: Exec) {
  description "Generate the file we use to map options to validators"
  group "generation"

  commandLine('m4','-P','git-dependencies/systemd/src/core/load-fragment-gperf.gperf.m4')

  doFirst {

    def outputFile = new File(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/net/sjrx/intellij/plugins/systemdunitfiles/semanticdata/load-fragment-gperf.gperf")
    outputFile.parentFile.mkdirs()
    standardOutput = new FileOutputStream(outputFile)
  }


}

generateLexer.mustRunAfter(compileJava)
classes.dependsOn += generateParser
classes.dependsOn += generateOptionValidator

generateDataFromManPages.dependsOn += cloneSystemdRepo
generateOptionValidator.dependsOn += cloneSystemdRepo


jar.dependsOn += generateDataFromManPages