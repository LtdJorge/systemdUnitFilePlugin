{
  parserClass="net.sjrx.intellij.plugins.systemdunitfiles.generated.UnitFileParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="UnitFile"
  psiImplClassSuffix="Impl"
  psiPackage="net.sjrx.intellij.plugins.systemdunitfiles.psi"
  psiImplPackage="net.sjrx.intellij.plugins.systemdunitfiles.psi.impl"

  elementTypeHolderClass="net.sjrx.intellij.plugins.systemdunitfiles.generated.UnitFileElementTypeHolder"
  elementTypeClass="net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFileElementType"
  tokenTypeClass="net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFileTokenType"

  implements("section_groups") = "net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFileSectionType"
  implements("property") = "net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFilePropertyType"
  implements("value") = "net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFileValueType"
}

unitFile ::= (comment_|crlf_)* section_groups*

section_groups ::= section_ line_items_* {name="section header"}

private line_items_ ::= ((property crlf_?)|(comment_ crlf_?)|crlf_)

property ::= key_ separator_ value? { pin=1 }

value ::= (CONTINUING_VALUE| comment_ )* COMPLETED_VALUE

// Single rules for tokens so that I can alias them for better error handling shown above.
private comment_ ::= COMMENT {name="comment" }
private crlf_ ::= CRLF {name="new line"}
private section_ ::= SECTION

private key_ ::= KEY
private separator_ ::= SEPARATOR { name="key-value separator (=)"}

