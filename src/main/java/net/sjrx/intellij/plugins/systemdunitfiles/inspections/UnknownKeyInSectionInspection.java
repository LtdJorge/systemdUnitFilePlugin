package net.sjrx.intellij.plugins.systemdunitfiles.inspections;

import com.intellij.codeInspection.InspectionManager;
import com.intellij.codeInspection.LocalInspectionTool;
import com.intellij.codeInspection.ProblemDescriptor;
import com.intellij.codeInspection.ProblemHighlightType;
import com.intellij.psi.PsiFile;
import com.intellij.psi.util.PsiTreeUtil;
import net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFilePropertyType;
import net.sjrx.intellij.plugins.systemdunitfiles.psi.UnitFileSectionType;
import net.sjrx.intellij.plugins.systemdunitfiles.semanticdata.SemanticDataRepository;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Collection;

/**
 * The purpose of this inspection is to catch any warnings that may be generated by systemd when processing a unit file.
 *
 * <p>The rules state:
 *
 * <pre>
 * Unit files may contain additional options on top of those listed here. If systemd encounters an unknown option,
 * it will write a warning log message but continue loading the unit. If an option or section name is prefixed with X-,
 * it is ignored completely by systemd. Options within an ignored section do not need the prefix.
 * Applications may use this to include additional information in the unit files.
 * </pre> (Source: https://www.freedesktop.org/software/systemd/man/systemd.unit.html#)
 */
public class UnknownKeyInSectionInspection extends LocalInspectionTool {

  private static final String IGNORED_SECTION_OR_KEY_PREFIX = "X-";
  static final String INSPECTION_TOOL_TIP_TEXT =
    "This key is unrecognized which will cause systemd to generate a warning when loading this unit.";

  @Override
  public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) {

    ArrayList<ProblemDescriptor> problems = new ArrayList<>();

    SemanticDataRepository sdr = SemanticDataRepository.getInstance();

    Collection<UnitFileSectionType> sections = PsiTreeUtil.collectElementsOfType(file, UnitFileSectionType.class);

    for (UnitFileSectionType section : sections) {

      if (section.getSectionName().startsWith(IGNORED_SECTION_OR_KEY_PREFIX)) {
        continue;
      }

      Collection<UnitFilePropertyType> keyAndValuePropertiesInSection =
        PsiTreeUtil.collectElementsOfType(section, UnitFilePropertyType.class);

      for (final UnitFilePropertyType keyAndValueProperty : keyAndValuePropertiesInSection) {

        if (keyAndValueProperty.getKey().startsWith(IGNORED_SECTION_OR_KEY_PREFIX)) {
          continue;
        }

        if (!sdr.getAllowedKeywordsInSection(section.getSectionName()).contains(keyAndValueProperty.getKey())) {
          // TODO Figure out what highlight to use

          problems.add(manager.createProblemDescriptor(keyAndValueProperty.getKeyNode().getPsi(), INSPECTION_TOOL_TIP_TEXT, true,
                                                       ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly));
        }
      }
    }

    return problems.toArray(new ProblemDescriptor[0]);
  }
}
